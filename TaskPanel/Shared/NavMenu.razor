@using TaskPanelLibrary.Service
@using TaskPanelLibrary.Service.Interface
@using Task = System.Threading.Tasks.Task

@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject INotificationService NotificationService

@if (AuthService.IsLoggedIn())
{
    <ul class="nav flex-column">
        <li class="nav-item">
            <a class="nav-link" href="/">Home</a>
        </li>
        
        @if (AuthService.GetCurrentUser()?.IsAdmin == true)
        {
            <li class="nav-item">
                <a class="nav-link" href="/users">Users Management</a>
            </li>
        }

        <li class="nav-item">
            <a class="nav-link" href="/teams">Teams Management</a>
        </li>
        
        <li class="nav-item">
            <a class="nav-link" href="/panels/user/@AuthService.GetCurrentUser().Id">Panels Management</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="/import-tasks">Import Tasks</a>
        </li>
        
        <li class="nav-item">
            <a class="nav-link" href="/notifications">
                Notifications 
                @if (notificationCount > 0)
                {
                    <span class="badge bg-danger ms-2">@notificationCount</span>
                }
            </a>
        </li>

        <li class="nav-item">
            <button class="nav-link" @onclick="Logout">Log Out</button>
        </li>
    </ul>
}

@code {
    private int notificationCount;

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.IsLoggedIn())
        {
            var currentUser = AuthService.GetCurrentUser();
            if (currentUser != null)
            {
                notificationCount = NotificationService.GetNotifications(currentUser.Id).Count;
                NotificationService.OnNotificationAdded += UpdateNotificationCount;
            }
        }
    }

    private void UpdateNotificationCount()
    {
        var currentUser = AuthService.GetCurrentUser();
        if (currentUser != null)
        {
            notificationCount = NotificationService.GetNotifications(currentUser.Id).Count;
            InvokeAsync(StateHasChanged);
        }
    }

    private void Logout()
    {
        AuthService.Logout();
        NavigationManager.NavigateTo("/login");
    }
}
