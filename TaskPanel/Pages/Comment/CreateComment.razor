@page "/comment/new/{taskId:int}"
@using TaskPanelLibrary.Service.Interface
@using TaskPanelLibrary.Entity
@using TaskPanelLibrary.Entity.Enum
@using Task = System.Threading.Tasks.Task

@inject ICommentService CommentService
@inject NavigationManager Navigation

<h3>Create Comment</h3>

<EditForm Model="_newComment" OnValidSubmit="SaveComment">
    <DataAnnotationsValidator/>

    <div class="form-group">
        <label>Message:</label>
        <InputText @bind-Value="_newComment.Message" class="form-control"/>
        <ValidationMessage For="@(() => _newComment.Message)" class="text-danger validation-message"/>
    </div>

    <div class="form-group">
        <label>Status:</label>
        <InputSelect @bind-Value="_newComment.Status" class="form-control">
            @foreach (var status in Enum.GetValues(typeof(EStatusComment)))
            {
                <option value="@status">@status</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => _newComment.Status)" class="text-danger validation-message"/>
    </div>

    <div class="mt-4">
        <button class="btn btn-primary" type="submit">Save</button>
        <button class="btn btn-secondary ml-3" type="button" @onclick="NavigationGoBack">Cancel</button>
    </div>
</EditForm>

<style>
    .validation-message {
        font-size: 0.875rem;
        color: #dc3545;
        margin-top: 5px;
    }

    .form-group {
        margin-bottom: 1rem;
    }
</style>

@code {
    [Parameter] public int taskId { get; set; }

    private Comment _newComment;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _newComment = new Comment
        {
            TaskId = taskId
        };
    }

    private async Task SaveComment()
    {
        CommentService.CreateComment(_newComment);
        NavigationGoBack();
    }

    private void NavigationGoBack()
    {
        Navigation.NavigateTo($"/comments/{taskId}");
    }

}