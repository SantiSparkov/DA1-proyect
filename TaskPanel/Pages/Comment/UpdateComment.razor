@page "/comment/update/{commentId:int}"

@using TaskPanelLibrary.DataTest
@using TaskPanelLibrary.Entity
@using TaskPanelLibrary.Entity.Enum
@using TaskPanelLibrary.Service
@using TaskPanelLibrary.Service.Interface
@using Task = System.Threading.Tasks.Task

@inject ICommentService CommentService
@inject ITaskService TaskService
@inject Panels Panels
@inject AuthService AuthorizationService
@inject INotificationService NotificationService
@inject NavigationManager Navigation

<title>Update Comment</title>

<h1 class="text-left text-dark font-weight-bold display-4 mb-4">Update Comment</h1>

<EditForm Model="@comment" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="table-responsive">
        <table class="table table-bordered mt-3">
            <thead class="thead-light">
            <tr>
                <th>Message</th>
                <th>Status</th>
                <th>Resolved by</th>
                <th>Resolved at</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td>
                    <InputText @bind-Value="comment.Message" class="form-control" />
                </td>
                <td>
                    <InputSelect @bind-Value="comment.Status" class="form-control">
                        @foreach (var status in Enum.GetValues(typeof(EStatusComment)))
                        {
                            <option value="@status">@status</option>
                        }
                    </InputSelect>
                </td>
                <td>
                    @if (comment.Status == EStatusComment.RESOLVED)
                    {
                        <span>@AuthorizationService.GetCurrentUser().Name</span>
                    }
                    else
                    {
                        <span>Not resolved</span>
                    }
                </td>
                <td>
                    @if (comment.Status == EStatusComment.RESOLVED)
                    {
                        <span>@DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")</span>
                    }
                    else
                    {
                        <span>Not resolved</span>
                    }
                </td>
            </tr>
            </tbody>
        </table>
    </div>

    <div class="d-flex justify-content-start mt-4">
        <button class="btn btn-primary" @onclick="() => NavigationUpdateComment(comment)">Update</button>
        <button class="btn btn-danger ml-3" style="margin-left: 10px" type="button" @onclick="() => NavigationGoBack()">Cancel</button>
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger mt-3" role="alert">
        <strong>Error!</strong> @_errorMessage
    </div>
}

@code {
    [Parameter] public int commentId { get; set; }
    Comment comment;

    private string _errorMessage;
    private int panelId;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        comment = CommentService.GetCommentById(commentId);
        var task = TaskService.GetTaskById(comment.TaskId);
        panelId = task.PanelId;
        Panels.createTeamAndPanel();
    }

    private void NavigationUpdateComment(Comment comment)
    {
        try
        {
            if (comment.Status == EStatusComment.RESOLVED)
            {
                var currentUser = AuthorizationService.GetCurrentUser();
                this.comment.ResolvedAt = DateTime.Now;
                this.comment.ResolvedBy = currentUser;
                
                NotificationService.CreateNotification(this.comment.CreatedById, this.comment.Message);
            }
            else
            {
                this.comment.ResolvedAt = null;
                this.comment.ResolvedBy = null;
            }
            
            CommentService.UpdateComment(comment);
            Navigation.NavigateTo($"/tasks/panel/{panelId}");
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
    }

    private void NavigationGoBack()
    {
        Navigation.NavigateTo($"/panels/user/{AuthorizationService.GetCurrentUser().Id}");
    }

    private Task HandleValidSubmit()
    {
        return Task.CompletedTask;
    }
}
