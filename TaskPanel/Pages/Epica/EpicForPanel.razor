@page "/EpicForPanel/{panelId:int}"
@using TaskPanelLibrary.Entity
@using TaskPanelLibrary.Service
@using TaskPanelLibrary.Service.Interface
@inject IEpicService IEpicService
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject ITrashService ITrashService


<h1 class="text-left text-dark font-weight-bold display-4 mb-4">Epics for Panel</h1>

@if (epics.Any())
{
    <h3 class="mt-5 text-success">Active Epics</h3>
    <table class="table table-bordered table-hover mt-3 shadow-sm rounded bg-white">
        <thead class="thead-light">
        <tr>
            <th>Title</th>
            <th>Description</th>
            <th>Priority</th>
            <th>Due Date</th>
            <th class="text-center">Actions</th>
            <th class="text-center">Tasks Management</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var epic in epics.Where(e => !e.IsDeleted))
        {
            <tr>
                <td @onclick="() => NavigateToTasksForEpic(epic.Id)" style="cursor: pointer;">@epic.Title</td>
                <td @onclick="() => NavigateToTasksForEpic(epic.Id)" style="cursor: pointer;">@epic.Description</td>
                <td @onclick="() => NavigateToTasksForEpic(epic.Id)" style="cursor: pointer;">@epic.Priority</td>
                <td @onclick="() => NavigateToTasksForEpic(epic.Id)" style="cursor: pointer;">@epic.DueDateTime.ToShortDateString()</td>
                <td class="text-center">
                    <button class="btn btn-outline-warning btn-sm" @onclick="() => UpdateEpic(epic.Id)">Update</button>
                    <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteEpic(epic)">Delete</button>
                </td>
                <td class="text-center">
                    <button class="btn btn-outline-info btn-sm" @onclick="() => ManageTasksForEpic(epic.Id)">Manage Tasks</button>
                    <button class="btn btn-outline-success btn-sm" @onclick="() => NavigateToEpicReport(epic.Id)">View Report</button>
                </td>
            </tr>
        }
        </tbody>
    </table>

    <h3 class="mt-5 text-danger">Deleted Epics</h3>
    <table class="table table-bordered table-hover mt-3 shadow-sm rounded bg-white">
        <thead class="thead-light">
        <tr>
            <th>Title</th>
            <th>Description</th>
            <th>Priority</th>
            <th>Due Date</th>
            <th class="text-center">Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var epic in deletedEpics)
        {
            <tr>
                <td>@epic.Title</td>
                <td>@epic.Description</td>
                <td>@epic.Priority</td>
                <td>@epic.DueDateTime.ToShortDateString()</td>
                <td class="text-center">
                    <button class="btn btn-outline-success btn-sm" @onclick="() => RecoverEpic(epic)">Recover</button>
                    <button class="btn btn-outline-danger btn-sm" @onclick="() => DeletePermanentlyEpic(epic.Id)">Delete Permanently</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <div class="alert alert-info mt-4" role="alert">
        No epics available. Please create one.
    </div>
}

<div class="d-flex justify-content-start mt-4">
    <button class="btn btn-primary" @onclick="NavigateToCreateEpic">New Epic</button>
    <button style="margin-left: 10px" class="btn btn-danger text-white ml-3" @onclick="NavigateBackToPanels">Back to Panels</button>
</div>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger mt-4">
        @_errorMessage
    </div>
}

@code {
    [Parameter] public int panelId { get; set; }

    private List<Epic> epics;
    private List<Epic> deletedEpics;
    private string _errorMessage;

    protected override void OnInitialized()
    {
        LoadEpics();
    }

    private void LoadEpics()
    {
        try
        {
            epics = IEpicService.GetAllEpicsByPanelId(panelId);
            var userTrashId = AuthService.GetCurrentUser().TrashId;
            var trash = ITrashService.GetTrashById(userTrashId);

            deletedEpics = trash.EpicList.Where(e => e.PanelId == panelId).ToList();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading epics: {ex.Message}";
        }
    }

    private void NavigateToCreateEpic()
    {
        NavigationManager.NavigateTo($"/epic/create/{panelId}");
    }

    private void NavigateToEpicReport(int epicId)
    {
        NavigationManager.NavigateTo($"/EpicReport/{epicId}");
    }

    private void NavigateBackToPanels()
    {
        var user = AuthService.GetCurrentUser();
        NavigationManager.NavigateTo($"/panels/user/{user.Id}");
    }

    private void NavigateToTasksForEpic(int epicId)
    {
        NavigationManager.NavigateTo($"/tasks/epic/{epicId}");
    }

    private void UpdateEpic(int epicId)
    {
        NavigationManager.NavigateTo($"/epic/update/{epicId}");
    }

    private void DeleteEpic(Epic epic)
    {
        try
        {
            IEpicService.DeleteEpic(epic.Id, AuthService.GetCurrentUser());
            LoadEpics();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error deleting epic: {ex.Message}";
        }
    }

    private void RecoverEpic(Epic epic)
    {
        try
        {
            IEpicService.RestoreEpic(epic.Id, AuthService.GetCurrentUser());
            LoadEpics();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error recovering epic: {ex.Message}";
        }
    }

    private void DeletePermanentlyEpic(int epicId)
    {
        try
        {
            ITrashService.RemoveEpicFromTrash(epicId, AuthService.GetCurrentUser().TrashId);
            IEpicService.DeleteEpic(epicId, AuthService.GetCurrentUser());
            LoadEpics();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error permanently deleting epic: {ex.Message}";
        }
    }

    private void ManageTasksForEpic(int epicId)
    {
        NavigationManager.NavigateTo($"/ManageTasksInEpic/{epicId}");
    }

}