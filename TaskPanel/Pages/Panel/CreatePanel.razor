@page "/panel/create/{teamId:int?}"
@using TaskPanelLibrary.Entity
@using TaskPanelLibrary.Service
@using TaskPanelLibrary.Service.Interface
@using Task = System.Threading.Tasks.Task
@inject IPanelService PanelService
@inject ITeamService TeamService
@inject NavigationManager Navigation
@inject AuthService AuthService

<title>CreatePanel</title>

<h1>New panel</h1>

<EditForm Model="_panel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>

    <div class="form-group">
        <label>Name:</label>
        <InputText @bind-Value="_panel.Name" class="form-control"/>
        <ValidationMessage For="@(() => _panel.Name)" class="text-danger validation-message"/>
    </div>

    <div class="form-group">
        <label>Description:</label>
        <InputText @bind-Value="_panel.Description" class="form-control"/>
        <ValidationMessage For="@(() => _panel.Description)" class="text-danger validation-message"/>
    </div>

    @if (!HasTeamSelected())
    {
        <div class="form-group">
            <label for="teamSelect">Select Team:</label>
            <InputSelect @bind-Value="selectedTeamId" class="form-control">
                <option value="" disabled selected>Select a team...</option>
                @foreach (var team in _availableTeams)
                {
                    <option value="@team.Id">@team.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => selectedTeamId)" class="text-danger validation-message"/>
        </div>
    }

    <div class="mt-4">
        <button class="btn btn-primary" type="submit" @onclick="SavePanel">Create Panel</button>
        <button class="btn btn-secondary ml-3" type="button" @onclick="NavigationGoBack">Cancel</button>
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger mt-4" role="alert">
        @_errorMessage
    </div>
}

@code {
    [Parameter] public int? teamId { get; set; }

    private Panel _panel = new Panel();
    private List<Team> _availableTeams = new();
    private int selectedTeamId;
    private string _errorMessage;

    protected override void OnInitialized()
    {
        try
        {
            base.OnInitialized();
            _availableTeams = TeamService.GetAllTeams();

            if (teamId.HasValue && teamId.Value > 0)
            {
                _panel.Team = TeamService.GetTeamById(teamId.Value);
            }
        }
        catch (Exception e)
        {
            _errorMessage = "Error loading teams: " + e.Message;
        }
    }

    private bool HasTeamSelected() => _panel.Team != null || teamId.HasValue;

    private void SavePanel()
    {
        try
        {
            if (!HasTeamSelected() && selectedTeamId == 0)
            {
                _errorMessage = "Please select a team";
                return;
            }
            
            if (!HasTeamSelected())
            {
                _panel.Team = TeamService.GetTeamById(selectedTeamId);
            }

            PanelService.CreatePanel(_panel, AuthService.GetCurrentUser().Id);
            NavigationGoBack();
        }
        catch (Exception e)
        {
            _errorMessage = "Error creating panel: " + e.Message;
        }
    }

    private void NavigationGoBack()
    {
        Navigation.NavigateTo($"/panels/user/{AuthService.GetCurrentUser().Id}");
    }

    private Task HandleValidSubmit(EditContext arg)
    {   
        return Task.CompletedTask;
    }

}