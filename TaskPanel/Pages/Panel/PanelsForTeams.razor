@page "/panels/teams/{idTeam:int}"

@using TaskPanelLibrary.Entity
@using TaskPanelLibrary.Service
@using TaskPanelLibrary.Service.Interface

@inject IPanelService PanelService;
@inject AuthService AuthService;
@inject NavigationManager Navigation;
@inject ITrashService TrashService;

<PageTitle>Panels for teams</PageTitle>

<h1 class="mb-4">Panels for Team</h1>

<h3>Active Panels</h3>
<table class="table table-hover table-striped">
    <thead class="thead-dark">
    <tr>
        <th>Name</th>
        <th>Description</th>
        <th class="text-center">Actions</th>
    </tr>
    </thead>
    <tbody>
    @foreach (Panel panel in _activePanels)
    {
        <tr>
            <td @onclick="() => NavigationPanel(panel.Id)" style="cursor: pointer;">@panel.Name</td>
            <td @onclick="() => NavigationPanel(panel.Id)" style="cursor: pointer;">@panel.Description</td>
            <td class="text-center">
                @if (isAdmin)
                {
                    <button class="btn btn-primary btn-sm" @onclick:stopPropagation @onclick="() => NavigateUpdatePanel(panel.Id)">Update</button>
                    <button class="btn btn-danger btn-sm ml-2" @onclick:stopPropagation @onclick="() => ConfirmDeletePanel(panel.Id)">Delete</button>
                }
            </td>
        </tr>
    }
    </tbody>
</table>

<div class="d-flex justify-content-start mt-3">
    <button class="btn btn-primary" @onclick="() => NavigateCreatePanel(idTeam)" style="cursor: pointer;">New Panel</button>
</div>

<h3 class="mt-5">Deleted Panels</h3>
<table class="table table-hover table-striped">
    <thead>
    <tr>
        <th>Name</th>
        <th>Description</th>
        <th class="text-center">Actions</th>
    </tr>
    </thead>
    <tbody>
    @foreach (Panel panel in _deletedPanels)
    {
        <tr>
            <td>@panel.Name</td>
            <td>@panel.Description</td>
            <td class="text-center">
                @if (isAdmin)
                {
                    <button class="btn btn-success btn-sm" @onclick="() => RestorePanel(panel.Id)">Restore</button>
                }
            </td>
        </tr>
    }
    </tbody>
</table>

@code {

    [Parameter] public int idTeam { get; set; }

    private List<Panel> _activePanels;
    private List<Panel> _deletedPanels;
    private bool isAdmin;

    protected override void OnInitialized()
    {
        isAdmin = AuthService.GetCurrentUser().IsAdmin;
        LoadPanels();
    }

    private void LoadPanels()
    {
        try
        {
            _activePanels = PanelService.GetAllPanelForTeam(idTeam).Where(p => !p.IsDeleted).DistinctBy(p => p.Id).ToList();
            var currentUser = AuthService.GetCurrentUser();
            var trash = TrashService.GetTrashById(currentUser.TrashId);
            _deletedPanels = trash.PanelList.Where(p => p.Team.Id == idTeam && p.IsDeleted).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading panels: " + ex.Message);
        }
    }

    private void NavigationPanel(int panelId)
    {
        Navigation.NavigateTo($"/tasks/panel/{panelId}");
    }

    private void NavigateUpdatePanel(int panelId)
    {
        Navigation.NavigateTo($"/panel/update/{panelId}");
    }

    private void NavigateCreatePanel(int idTeam)
    {
        Navigation.NavigateTo($"/panel/create/{idTeam}");
    }

    private void ConfirmDeletePanel(int panelId)
    {
        PanelService.DeletePanel(panelId, AuthService.GetCurrentUser());
        LoadPanels();
    }

    private void RestorePanel(int panelId)
    {
        try
        {
            PanelService.RestorePanel(panelId, AuthService.GetCurrentUser());
            LoadPanels();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error restoring panel: " + ex.Message);
        }
    }
}
