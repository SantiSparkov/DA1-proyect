@page "/tasks/panel/{panelId:int}"

@using TaskPanelLibrary.Service
@using TaskPanelLibrary.Service.Interface
@using Task = TaskPanelLibrary.Entity.Task

@inject AuthService AuthService
@inject ITaskService TaskService
@inject NavigationManager Navigation
@inject ITrashService TrashService

<title>TaskForPanel</title>

<h1>Tasks for Panel</h1>

<h3>Active Tasks</h3>
<table class="table">
    <thead>
    <tr>
        <th>Task Id</th>
        <th>Title</th>
        <th>Description</th>
        <th>Priority</th>
        <th>Due Date</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    @foreach (Task task in _activeTasks)
    {
        <tr>
            <td @onclick="() => NavigationComments(task.Id)" style="cursor: pointer;">@task.Id</td>
            <td @onclick="() => NavigationComments(task.Id)" style="cursor: pointer;">@task.Title</td>
            <td @onclick="() => NavigationComments(task.Id)" style="cursor: pointer;">@task.Description</td>
            <td @onclick="() => NavigationComments(task.Id)" style="cursor: pointer;">@task.Priority</td>
            <td @onclick="() => NavigationComments(task.Id)" style="cursor: pointer;">@task.DueDate</td>
            <td>
                <button class="btn btn-primary btn-sm" @onclick="() => NavigationUpdateTask(task.Id)">Update</button>
                <button class="btn btn-danger btn-sm ml-2" @onclick="() => ConfirmDeleteTask(task)">Delete</button>
            </td>
        </tr>
    }
    </tbody>
</table>

<h3 class="mt-5">Deleted Tasks</h3>
<table class="table">
    <thead>
    <tr>
        <th>Task Id</th>
        <th>Title</th>
        <th>Description</th>
        <th>Priority</th>
        <th>Due Date</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    @foreach (Task task in _deletedTasks)
    {
        <tr>
            <td>@task.Id</td>
            <td>@task.Title</td>
            <td>@task.Description</td>
            <td>@task.Priority</td>
            <td>@task.DueDate</td>
            <td>
                <button class="btn btn-success btn-sm" @onclick="() => RecoverTask(task)">Recover</button>
            </td>
        </tr>
    }
    </tbody>
</table>

<h3 class="mt-5">Expired Tasks</h3>
<table class="table">
    <thead>
    <tr>
        <th>Task Id</th>
        <th>Title</th>
        <th>Description</th>
        <th>Priority</th>
        <th>Due Date</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    @foreach (Task task in _expiredTasks)
    {
        <tr>
            <td>@task.Id</td>
            <td>@task.Title</td>
            <td>@task.Description</td>
            <td>@task.Priority</td>
            <td>@task.DueDate</td>
            <td>
                <button class="btn btn-warning btn-sm" @onclick="() => OpenReactivateTaskModal(task.Id)">Reactivate</button>
                <button class="btn btn-danger btn-sm ml-2" @onclick="() => ConfirmDeleteTask(task)">Delete</button>
            </td>
        </tr>
    }
    </tbody>
</table>

<div class="d-flex justify-content-start mt-3">
    <button class="btn btn-primary" @onclick="() => NavigateCreateTask(panelId)">New Task</button>
</div>

@code {
    [Parameter] public int panelId { get; set; }

    private List<Task> _activeTasks;
    private List<Task> _deletedTasks;
    private List<Task> _expiredTasks;
    private bool showModal = false;
    private bool showWarningModal = false;
    private int selectedTaskId;
    private DateTime newDueDate;

    protected override void OnInitialized()
    {
        LoadTasks();
    }

    private void LoadTasks()
    {
        var currentUser = AuthService.GetCurrentUser();
        var trash = TrashService.GetTrashById(currentUser.TrashId);
        
        _activeTasks = TaskService.GetAllTasks(panelId).Where(t => t.DueDate >= DateTime.Now && !t.IsDeleted).ToList();
        
        _deletedTasks = trash.TaskList.Where(t => t.PanelId == panelId && t.IsDeleted).ToList();
        
        _expiredTasks = TaskService.GetAllTasks(panelId).Where(t => t.DueDate < DateTime.Now && !t.IsDeleted).ToList();
    }

    private void NavigationComments(int taskId)
    {
        Navigation.NavigateTo($"/comments/{taskId}");
    }

    private void NavigationUpdateTask(int taskId)
    {
        Navigation.NavigateTo($"/task/update/{taskId}");
    }

    private void NavigateCreateTask(int panelId)
    {
        Navigation.NavigateTo($"/task/create/{panelId}");
    }

    private void ConfirmDeleteTask(Task task)
    {
        var currentUser = AuthService.GetCurrentUser();
        TaskService.DeleteTask(task, currentUser);
        LoadTasks();
    }

    private void RecoverTask(Task task)
    {
        var currentUser = AuthService.GetCurrentUser();
        TaskService.RecoverTask(task, currentUser);
        LoadTasks();
    }

    private void OpenReactivateTaskModal(int taskId)
    {
        selectedTaskId = taskId;
        newDueDate = DateTime.Now;
        showModal = true;
    }
}
