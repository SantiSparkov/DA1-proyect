@page "/tasks/panel/{panelId:int}"

@using TaskPanelLibrary.Entity
@using TaskPanelLibrary.Service
@using TaskPanelLibrary.Service.Interface
@using Task = TaskPanelLibrary.Entity.Task

@inject AuthService AuthService
@inject ITaskService TaskService
@inject NavigationManager Navigation
@inject ITrashService TrashService

<title>TaskForPanel</title>

<h1 class="text-left text-dark font-weight-bold display-4 mb-4">Tasks for Panel</h1>

@if (tasks.Any())
{
    <h3 class="mt-5 text-success">Active Tasks</h3>
    <table class="table table-bordered table-hover mt-3 shadow-sm rounded bg-white">
        <thead class="thead-light">
        <tr>
            <th>Title</th>
            <th>Description</th>
            <th>Priority</th>
            <th>Due Date</th>
            <th>Estimation Hours</th>
            <th>Inverted Hours</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (Task task in tasks.Where(t => t.DueDate >= DateTime.Now && !t.IsDeleted))
        {
            <tr>
                <td @onclick="() => NavigationComments(task.Id)" style="cursor: pointer;">@task.Title</td>
                <td @onclick="() => NavigationComments(task.Id)" style="cursor: pointer;">@task.Description</td>
                <td @onclick="() => NavigationComments(task.Id)" style="cursor: pointer;">@task.Priority</td>
                <td @onclick="() => NavigationComments(task.Id)" style="cursor: pointer;">@task.DueDate.ToString("dd/MM/yyyy")</td>
                <td @onclick="() => NavigationComments(task.Id)" style="cursor: pointer;">@task.EstimatioHour</td>
                <td @onclick="() => NavigationComments(task.Id)" style="cursor: pointer;">@(task.InvertedEstimateHour)</td>
                <td>
                    <button class="btn btn-outline-primary btn-sm" @onclick="() => NavigationUpdateTask(task.Id)">Update</button>
                    <button class="btn btn-outline-danger btn-sm ml-2" @onclick="() => ConfirmDeleteTask(task)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>

    <h3 class="mt-5 text-danger">Deleted Tasks</h3>
    <table class="table table-bordered table-hover mt-3 shadow-sm rounded bg-white">
        <thead class="thead-light">
        <tr>
            <th>Title</th>
            <th>Description</th>
            <th>Priority</th>
            <th>Due Date</th>
            <th>Estimation Hours</th>
            <th>Inverted Hours</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (Task task in tasks.Where(t => t.IsDeleted))
        {
            <tr>
                <td>@task.Title</td>
                <td>@task.Description</td>
                <td>@task.Priority</td>
                <td>@task.DueDate.ToString("dd/MM/yyyy")</td>
                <td>@task.EstimatioHour</td>
                <td>@task.InvertedEstimateHour</td>
                <td>
                    <button class="btn btn-outline-success btn-sm" @onclick="() => RecoverTask(task)">Recover</button>
                    <button class="btn btn-outline-danger btn-sm ml-2" @onclick="() => ConfirmDeleteTask(task)">Delete Permanently</button>
                </td>
            </tr>
        }
        </tbody>
    </table>

    <h3 class="mt-5 text-warning">Expired Tasks</h3>
    <table class="table table-bordered table-hover mt-3 shadow-sm rounded bg-white">
        <thead class="thead-light">
        <tr>
            <th>Title</th>
            <th>Description</th>
            <th>Priority</th>
            <th>Due Date</th>
            <th>Estimation Hours</th>
            <th>Inverted Hours</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (Task task in tasks.Where(t => t.DueDate < DateTime.Now && !t.IsDeleted))
        {
            <tr>
                <td>@task.Title</td>
                <td>@task.Description</td>
                <td>@task.Priority</td>
                <td>@task.DueDate.ToString("dd/MM/yyyy")</td>
                <td>@task.EstimatioHour</td>
                <td>@task.InvertedEstimateHour</td>
                <td>
                    <button class="btn btn-outline-warning btn-sm" @onclick="() => OpenReactivateTaskModal(task.Id)">Reactivate</button>
                    <button class="btn btn-outline-danger btn-sm ml-2" @onclick="() => ConfirmDeleteTask(task)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
<div class="alert alert-info mt-4" role="alert">
    There are no tasks available. Please create one
</div>
}

<div class="d-flex justify-content-start mt-3">
    <button class="btn btn-primary" @onclick="() => NavigateCreateTask(panelId)">New Task</button>
    <button class="btn btn-danger text-white ml-3" style="margin-left: 10px; cursor: pointer;" type="button" @onclick="NavigationGoBack">Back to Panels</button>
</div>

@if (showModal)
{
    <div class="modal fade show" tabindex="-1" role="dialog" style="display:block;" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Reactivate Task</h5>
                    <button type="button" class="close" @onclick="CloseModal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@this">
                        <p>Update the due date for task:</p>
                        <label for="dueDate">New Due Date:</label>
                        <InputDate id="dueDate" @bind-Value="newDueDate" min="@DateTime.Now.ToString("yyyy-MM-dd")" class="form-control"/>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    <button class="btn btn-primary" @onclick="ReactivateTask">Reactivate</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showWarningModal)
{
    <div class="modal fade show" tabindex="-1" role="dialog" style="display:block;" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Invalid Date</h5>
                    <button type="button" class="close" @onclick="CloseWarningModal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>The selected due date cannot be in the past. Please choose a valid date.</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="CloseWarningModal">OK</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int panelId { get; set; }

    private List<Task> tasks;
    private bool showModal = false;
    private bool showWarningModal = false;
    private int selectedTaskId;
    private DateTime newDueDate;

    protected override void OnInitialized()
    {
        tasks = TaskService.GetTasksFromPanel(panelId);
    }

    private void NavigationComments(int taskId)
    {
        Navigation.NavigateTo($"/comments/{taskId}");
    }

    private void NavigationUpdateTask(int taskId)
    {
        Navigation.NavigateTo($"/task/update/{taskId}");
    }

    private void NavigateCreateTask(int panelId)
    {
        Navigation.NavigateTo($"/task/create/{panelId}");
    }

    private void ConfirmDeleteTask(Task task)
    {
        var currentUser = AuthService.GetCurrentUser();
        TaskService.DeleteTask(task, currentUser);
        tasks = TaskService.GetTasksFromPanel(panelId);
    }

    private void OpenReactivateTaskModal(int taskId)
    {
        selectedTaskId = taskId;
        newDueDate = DateTime.Now;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private void CloseWarningModal()
    {
        showWarningModal = false;
    }

    private void ReactivateTask()
    {
        if (newDueDate >= DateTime.Now)
        {
            var task = TaskService.GetTaskById(selectedTaskId);
            task.DueDate = newDueDate;
            TaskService.UpdateTask(task);
            tasks = TaskService.GetTasksFromPanel(panelId);
            showModal = false;
        }
        else
        {
            showWarningModal = true;
        }
    }

    private void RecoverTask(Task task)
    {
        var currentUser = AuthService.GetCurrentUser();
        TaskService.RecoverTask(task, currentUser);
        tasks = TaskService.GetTasksFromPanel(panelId);
    }

    private void NavigationGoBack()
    {
        Navigation.NavigateTo($"/panels/user/{AuthService.GetCurrentUser().Id}");
    }

}