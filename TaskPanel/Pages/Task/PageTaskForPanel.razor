@page "/tasks/panel/{panelId:int}"

@using TaskPanelLibrary.Service.Interface
@using Task = TaskPanelLibrary.Entity.Task

@inject ITaskService TaskService
@inject NavigationManager Navigation

<title>TaskForPanel</title>

<h1>Tasks for Panel</h1>

<table class="table">
    <thead>
    <tr>
        <th>Task Id</th>
        <th>Title</th>
        <th>Description</th>
        <th>Priority</th>
        <th>Due Date</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    @foreach (Task task in tasks)
    {
        <tr>
            <td @onclick="() => NavigationComments(task.Id)" style="cursor: pointer;">@task.Id</td>
            <td @onclick="() => NavigationComments(task.Id)" style="cursor: pointer;">@task.Title</td>
            <td @onclick="() => NavigationComments(task.Id)" style="cursor: pointer;">@task.Description</td>
            <td @onclick="() => NavigationComments(task.Id)" style="cursor: pointer;">@task.Priority</td>
            <td @onclick="() => NavigationComments(task.Id)" style="cursor: pointer;">@task.DueDate</td>
            <td>
                <button class="btn btn-primary btn-sm" @onclick="() => NavigationUpdateTask(task.Id)">Update</button>
                <button class="btn btn-danger btn-sm ml-2" @onclick="() => ConfirmDeleteTask(task)">Delete</button>
            </td>
        </tr>
    }
    </tbody>
</table>

<div class="d-flex justify-content-start mt-3">
    <button class="btn btn-primary" @onclick="() => NavigateCreateTask(panelId)">New Task</button>
</div>

@code {

    [Parameter] public int panelId { get; set; }

    List<Task> tasks;

    protected override void OnInitialized()
    {
        tasks = TaskService.GetAllTasks(panelId);
    }

    private void NavigationComments(int taskId)
    {
        Navigation.NavigateTo($"/comments/{taskId}");
    }

    private void NavigationUpdateTask(int taskId)
    {
        Navigation.NavigateTo($"/task/update/{taskId}");
    }

    private void NavigateCreateTask(int panelId)
    {
        Navigation.NavigateTo($"/task/create/{panelId}");
    }

    private void ConfirmDeleteTask(Task task)
    {
        TaskService.DeleteTask(task);
        tasks = TaskService.GetAllTasks(panelId);
    }

}