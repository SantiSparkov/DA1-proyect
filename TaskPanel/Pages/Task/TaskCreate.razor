@page "/task/create/{panelId:int}"
@using TaskPanelLibrary.Service.Interface
@using TaskPanelLibrary.Entity.Enum

@inject ITaskService TaskService
@inject NavigationManager Navigation

<h1 class="text-left text-dark font-weight-bold display-4 mb-4">Create Task</h1>

<EditForm Model="_task" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>

    <div class="form-group mb-3">
        <label class="font-weight-bold">Title:</label>
        <InputText @bind-Value="_task.Title" class="form-control"/>
        <ValidationMessage For="@(() => _task.Title)" class="text-danger validation-message"/>
    </div>

    <div class="form-group mb-3">
        <label class="font-weight-bold">Description:</label>
        <InputText @bind-Value="_task.Description" class="form-control"/>
        <ValidationMessage For="@(() => _task.Description)" class="text-danger validation-message"/>
    </div>

    <div class="form-group mb-3">
        <label class="font-weight-bold">Priority:</label>
        <InputSelect @bind-Value="_task.Priority" class="form-control">
            @foreach (EPriority priority in Enum.GetValues(typeof(EPriority)))
            {
                <option value="@priority">@priority</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => _task.Priority)" class="text-danger validation-message"/>
    </div>

    <div class="form-group mb-3">
        <label for="ResolvedAt" class="font-weight-bold">Due Date:</label>
        <InputDate @bind-Value="_task.DueDate" class="form-control"/>
        <ValidationMessage For="@(() => _task.DueDate)" class="text-danger validation-message"/>
    </div>

    <div class="mt-4">
        <button class="btn btn-primary" type="submit" @onclick="SaveTask">Save</button>
        <button class="btn btn-danger text-white ml-3" style="margin-left: 10px; cursor: pointer;" type="button" @onclick="NavigationGoBack">Cancel</button>
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger mt-4" role="alert">
        @_errorMessage
    </div>
}

<style>
    .validation-message {
        font-size: 0.875rem;
        color: #dc3545;
        margin-top: 5px;
    }
    .form-group {
        margin-bottom: 1rem;
    }
</style>

@code {
    [Parameter] public int panelId { get; set; }

    TaskPanelLibrary.Entity.Task _task;
    private string _errorMessage;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _task = new TaskPanelLibrary.Entity.Task();

        _task.DueDate = DateTime.Now.AddDays(1).Date;
    }

    private async Task SaveTask()
    {
        try
        {
            _task.PanelId = panelId;
            TaskService.CreateTask(_task);
            NavigationGoBack();
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }

    private void NavigationGoBack()
    {
        Navigation.NavigateTo($"/tasks/panel/{panelId}");
    }

    private Task HandleValidSubmit(EditContext arg)
    {
        return Task.CompletedTask;
    }
}
