@page "/teams"
@using TaskPanelLibrary.Entity
@using TaskPanelLibrary.Service
@using TaskPanelLibrary.Service.Interface
@using Task = System.Threading.Tasks.Task
@inject ITeamService TeamService
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<title>Teams</title>

<h1 class="text-left text-dark font-weight-bold display-4 mb-4">Teams</h1>

@if (_teams != null && _teams.Any())
{
    <table class="table table-bordered table-hover mt-3 shadow-sm rounded bg-white">
        <thead class="thead-light">
        <tr>
            <th>Name</th>
            <th>Creation Date</th>
            <th>Task Description</th>
            <th>Members Count</th>
            @if (isAdmin)
            {
                <th>Actions</th>
            }
            <th>Members</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var team in _teams)
        {
            <tr @onclick="() => NavigateToPanelsForTeams(team.Id)" style="cursor: pointer;" class="selectable-row">
                <td>@team.Name</td>
                <td>@team.CreationDate.ToShortDateString()</td>
                <td>@team.TasksDescription</td>
                <td>@team.Users.Count / @team.MaxAmountOfMembers</td>
                @if (isAdmin)
                {
                    <td>
                        <button class="btn btn-outline-warning btn-sm" @onclick="() => EditTeam(team.Id)" @onclick:stopPropagation>Edit</button>
                        @if (AuthService.GetCurrentUser().Id == team.TeamLeaderId)
                        {
                            <button class="btn btn-outline-danger btn-sm ml-2" style="margin-left: 5px" @onclick="() => DeleteTeam(team.Id, AuthService.GetCurrentUser().Id)" @onclick:stopPropagation>Delete</button>
                        }
                    </td>
                }
                <td>
                    <button class="btn btn-outline-info btn-sm" @onclick="() => ShowMembers(team)" @onclick:stopPropagation>View Members</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <div class="alert alert-info mt-4" role="alert">
        There are no teams available. Please create a new team.
    </div>
}

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger mt-4">@_errorMessage</div>
}

@if (isAdmin)
{
    <button class="btn btn-primary mt-4" @onclick="NavigateToCreateTeam">Create New Team</button>
}

<div class="modal fade show" tabindex="-1" role="dialog" style="display:@(showModal ? "block" : "none");" aria-hidden="@(showModal ? "false" : "true")">
    <div class="modal-dialog" role="document">
        <div class="modal-content shadow-lg">
            <div class="modal-header bg-secondary text-white">
                <h5 class="modal-title">Team Members</h5>
                <button type="button" class="btn-close text-white" aria-label="Close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                @if (selectedTeam != null && selectedTeam.Users != null && selectedTeam.Users.Any())
                {
                    <ul class="list-group">
                        @foreach (var user in selectedTeam.Users)
                        {
                            <li class="list-group-item">@user.Name (@user.Email)</li>
                        }
                    </ul>
                }
                else
                {
                    <p class="text-muted">No users assigned to this team.</p>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger text-white ml-3" style="cursor: pointer;" @onclick="CloseModal">Close</button>
            </div>
        </div>
    </div>
</div>

<style>
    .selectable-row:hover {
        background-color: #f9f9f9;
        cursor: pointer;
    }
</style>

@code {
    private List<Team> _teams;
    private string _errorMessage;
    private bool showModal = false;
    private Team selectedTeam = null;
    private bool isAdmin;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _teams = TeamService.GetAllTeams();
            isAdmin = AuthService.GetCurrentUser().IsAdmin;
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }

    private void NavigateToCreateTeam()
    {
        NavigationManager.NavigateTo("/teams/create");
    }

    private void EditTeam(int id)
    {
        NavigationManager.NavigateTo($"/teams/edit/{id}");
    }

    private void ShowMembers(Team team)
    {
        if (team.Users != null)
        {
            selectedTeam = team;
            showModal = true;
        }
    }

    private void NavigateToPanelsForTeams(int teamId)
    {
        NavigationManager.NavigateTo($"/panels/teams/{teamId}");
    }

    private void CloseModal()
    {
        showModal = false;
        selectedTeam = null;
    }

    private void DeleteTeam(int teamId, int userId)
    {
        try
        {
            var team = TeamService.GetTeamById(teamId);
            TeamService.DeleteTeam(team, userId);
            _teams = TeamService.GetAllTeams();
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }

}