@page "/teams/edit/{id:int}"
@using TaskPanelLibrary.Entity
@using TaskPanelLibrary.Service
@using TaskPanelLibrary.Service.Interface
@using Task = System.Threading.Tasks.Task
@inject ITeamService TeamService
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<title>Edit Team</title>

<h1 class="text-left text-dark display-4 mb-4">Edit Team</h1>

@if (_teamToEdit != null)
{
    <EditForm Model="_teamToEdit" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator/>
        <ValidationSummary class="text-danger"/>

        <div class="form-group mb-3">
            <label for="teamName" class="font-weight-bold">Team Name:</label>
            <InputText id="teamName" @bind-Value="_teamToEdit.Name" class="form-control"/>
            <ValidationMessage For="@(() => _teamToEdit.Name)" class="text-danger"/>
        </div>

        <div class="form-group mb-3">
            <label for="taskDescription" class="font-weight-bold">Task Description:</label>
            <InputTextArea id="taskDescription" @bind-Value="_teamToEdit.TasksDescription" class="form-control"/>
            <ValidationMessage For="@(() => _teamToEdit.TasksDescription)" class="text-danger"/>
        </div>

        <div class="form-group mb-3">
            <label for="maxMembers" class="font-weight-bold">Max Members:</label>
            <InputNumber id="maxMembers" @bind-Value="_teamToEdit.MaxAmountOfMembers" class="form-control"/>
            <ValidationMessage For="@(() => _teamToEdit.MaxAmountOfMembers)" class="text-danger"/>
        </div>

        <div class="form-group mb-3">
            <label class="font-weight-bold">Team Members:</label>
            <button type="button" class="btn btn-info btn-sm ml-2" @onclick="OpenUserSelectionModal">Select Team Members</button>
            <ul class="list-group mt-2">
                @if (_teamToEdit.Users != null && _teamToEdit.Users.Any())
                {
                    @foreach (var user in _teamToEdit.Users)
                    {
                        <li class="list-group-item">@user.Name (@user.Email)</li>
                    }
                }
                else
                {
                    <li class="list-group-item text-muted">No users assigned</li>
                }
            </ul>
        </div>

        <div class="mt-4 d-flex justify-content-start">
            <button type="submit" class="btn btn-primary">Update Team</button>
            <button type="button" class="btn btn-secondary ml-3" @onclick="Cancel">Cancel</button>
        </div>
    </EditForm>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger mt-4">@_errorMessage</div>
    }

    <div class="modal fade show" tabindex="-1" role="dialog" style="display:@(showUserModal ? "block" : "none");" aria-hidden="@(showUserModal ? "false" : "true")">
        <div class="modal-dialog" role="document">
            <div class="modal-content shadow-lg">
                <div class="modal-header bg-secondary text-white">
                    <h5 class="modal-title">Select Team Members</h5>
                    <button type="button" class="btn-close text-white" aria-label="Close" @onclick="CloseUserModal"></button>
                </div>
                <div class="modal-body">
                    <ul class="list-group">
                        @foreach (var user in _availableUsers)
                        {
                            @if (user.Email != AuthService.GetCurrentUser().Email)
                            {
                                <li class="list-group-item d-flex align-items-center">
                                    <input type="checkbox" checked="@_selectedUsers.Contains(user)" @onchange="(e) => OnUserCheckboxChange(e, user)" class="mr-2"/> 
                                    <span>@user.Name (@user.Email)</span>
                                </li>
                            }
                        }
                    </ul>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="ConfirmUserSelection">Confirm Selection</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseUserModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <p>Loading team information...</p>
}


@code {
    [Parameter] public int id { get; set; }
    private Team _teamToEdit = new();
    private List<User> _availableUsers = new();
    private List<User> _selectedUsers = new();
    private string _errorMessage;
    private bool showUserModal = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _teamToEdit = TeamService.GetTeamById(id);
            _availableUsers = UserService.GetAllUsers();
            _selectedUsers = new List<User>(_teamToEdit.Users);
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (_teamToEdit.Users == null || _teamToEdit.Users.Count < 1)
        {
            _errorMessage = "A team must have at least one user.";
            return;
        }

        if (_teamToEdit.Users.Count > _teamToEdit.MaxAmountOfMembers)
        {
            _errorMessage = "The number of selected users exceeds the maximum number of members allowed.";
            return;
        }

        try
        {
            TeamService.UpdateTeam(_teamToEdit, AuthService.GetCurrentUser().Id);
            NavigationManager.NavigateTo("/teams");
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/teams");
    }

    private void OpenUserSelectionModal()
    {
        _selectedUsers = new List<User>(_teamToEdit.Users);
        showUserModal = true;
    }

    private void CloseUserModal()
    {
        showUserModal = false;
    }

    private void OnUserCheckboxChange(ChangeEventArgs e, User user)
    {
        var isChecked = ((bool?)e.Value) ?? false;

        if (isChecked)
        {
            if (!_selectedUsers.Contains(user))
            {
                _selectedUsers.Add(user);
            }
        }
        else
        {
            _selectedUsers.Remove(user);
        }
    }

    private void ConfirmUserSelection()
    {
        if (_selectedUsers.Count > _teamToEdit.MaxAmountOfMembers)
        {
            _errorMessage = "You cannot select more users than the maximum allowed members.";
            return;
        }

        _teamToEdit.Users = new List<User>(_selectedUsers);
        showUserModal = false;
    }
}
