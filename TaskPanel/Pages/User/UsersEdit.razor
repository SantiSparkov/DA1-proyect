@page "/users/edit/{id:int}"
@using TaskPanelLibrary.Entity
@using TaskPanelLibrary.Service
@using TaskPanelLibrary.Service.Interface
@using Task = System.Threading.Tasks.Task
@inject IUserService UserService
@inject AuthService AuthService
@inject NavigationManager NavigationManager

<title>Edit User</title>

<h1 class="text-left text-dark font-weight-bold display-4 mb-4">Edit User</h1>

@if (_user != null)
{
    <EditForm Model="_user" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator/>
        <ValidationSummary class="text-danger"/>

        <div class="form-group mb-3">
            <label class="font-weight-bold">Name:</label>
            <InputText @bind-Value="_user.Name" class="form-control"/>
            <ValidationMessage For="@(() => _user.Name)" class="text-danger"/>
        </div>

        <div class="form-group mb-3">
            <label class="font-weight-bold">Last Name:</label>
            <InputText @bind-Value="_user.LastName" class="form-control"/>
            <ValidationMessage For="@(() => _user.LastName)" class="text-danger"/>
        </div>

        <div class="form-group mb-3">
            <label class="font-weight-bold">Email:</label>
            <InputText @bind-Value="_user.Email" class="form-control"/>
            <ValidationMessage For="@(() => _user.Email)" class="text-danger"/>
        </div>

        <div class="form-group mb-3">
            <label class="font-weight-bold">Born Date:</label>
            <InputDate @bind-Value="_user.BirthDate" class="form-control"/>
            <ValidationMessage For="@(() => _user.BirthDate)" class="text-danger"/>
        </div>

        <div class="form-group mb-3">
            <label class="font-weight-bold">Is Admin:</label>
            <div class="custom-control custom-checkbox">
                <InputCheckbox @bind-Value="_user.IsAdmin" class="custom-control-input" id="isAdminCheckbox"/>
                <label class="custom-control-label" for="isAdminCheckbox">Admin</label>
            </div>
        </div>

        <div class="mt-4 d-flex justify-content-start">
            <button type="submit" class="btn btn-primary">Save Changes</button>
            <button type="button" class="btn btn-secondary ml-3" @onclick="CancelEdit">Cancel</button>
        </div>
    </EditForm>
}
else
{
    <p>Loading...</p>
}

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger mt-4">@_errorMessage</div>
}

@code {
    [Parameter] public int Id { get; set; }
    private User _user;
    private string _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _user = UserService.GetUserById(Id);
            if (isNotValidOperation())
            {
                NavigationManager.NavigateTo("/not-authorized");
            }
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            UserService.UpdateUser(_user);
            NavigationManager.NavigateTo("/users");
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }

    private void CancelEdit()
    {
        NavigationManager.NavigateTo("/users");
    }

    private bool isNotValidOperation()
    {
        return _user == null || !AuthService.GetCurrentUser().IsAdmin || _user.IsAdmin || AuthService.GetCurrentUser().Email.Equals(_user.Email);
    }
}
